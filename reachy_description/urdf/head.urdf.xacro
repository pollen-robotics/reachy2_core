<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:arg name="depth_camera" default="true"/>
  <xacro:property name="camera_link" value="0.05" /> <!-- Size of square 'camera' box -->
  <xacro:property name="camera_convergence" value="0.0" /> <!-- convergence angle (rad) of the cameras. 0=parallel-->


  <xacro:property name="neck_length" value="0.05"/>
  <xacro:property name="neck_radius" value="0.03"/>
  <xacro:property name="neck_mass" value="0.5"/>


  <!-- <xacro:property name="neck_offset_x" value="-0.0465"/> -->
  <xacro:property name="neck_offset_x" value="0.0"/>
  <xacro:property name="neck_offset_y" value="0"/>
  <xacro:property name="neck_offset_z" value="0.125"/>
  <xacro:property name="neck_offset_pitch" value="${radians(10)}"/> <!-- 10 degrees -->
  <xacro:property name="neck_offset_yaw" value="0.0"/>

  <xacro:include filename="$(find orbita3d_description)/urdf/orbita3d.urdf.xacro"/>

    <material name="camblack">
        <color rgba="0.2 0.2 0.2 1"/>
    </material>
    <material name="neckwhite">
        <color rgba="0.9 0.9 0.9 1"/>
    </material>


  <xacro:macro name="head" params="parent damping friction neck_config">

    <!-- xyz="${neck_offset_x} ${neck_offset_y} ${neck_offset_z}" rpy="${pi} ${neck_offset_pitch} ${neck_offset_yaw}" -->
  <xacro:orbita3d
    name="neck" parent="${parent}"
    length="${neck_length}" radius="${neck_radius}" mass="${neck_mass}"
    xyz="${neck_offset_x} ${neck_offset_y} ${neck_offset_z}" rpy="0 ${neck_offset_pitch} ${neck_offset_yaw}"
    damping="${damping}" friction="${friction}"
    config_file="${neck_config}"
    />


    <joint name="neck_fixed" type="fixed">
      <origin xyz="0 0 0" rpy="0.0 0.0 0.0"/>
      <parent link="neck_out_link" />
      <child link="head" />
    </joint>


    <!-- Head Links -->

    <link name="head">
      <inertial>
        <origin xyz="0.0116978 -0.00022144 0.0611705" rpy="0.0 0.0 0.0"/>
        <mass value="0.325"/>
	 <inertia ixx="0.00085265" ixy="-0.00000298" ixz="0.00000932"
		  iyx="-0.00000298" iyy="0.00063136" iyz="-0.000000039"
		  izx="0.00000932" izy="-0.000000039" izz="0.0008951"/>
      </inertial>
      <visual>

        <origin xyz="0.00 0.0 0.0" rpy="0.0 0.0 0.0"/>

        <geometry>

          <mesh filename="file://$(find reachy_description)/meshes/head_visual.dae"/>

        </geometry>

      </visual>
      <collision>
	<!-- <origin xyz="0.0 0.0 0.05" rpy="0.0 0.0 0.0"/> -->
	<origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <geometry>
	  <!-- <box size="0.12 0.162 0.1"/> -->
          <mesh filename="file://$(find reachy_description)/meshes/head_collider.dae"/>
        </geometry>
      </collision>
    </link>

    <link name="head_base">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <mass value="0.001"/>
        <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6"/>
      </inertial>
    </link>

    <joint name="head_base_fixed" type="fixed">
      <origin xyz="0.0 0 0.0" rpy="0.0 0.0 0"/>
      <parent link="head" />
      <child link="head_base" />
    </joint>


    <!-- <link name="head_tracker"> -->

    <!--   <visual name=""> -->
    <!--     <origin xyz="0 0 0" rpy="0.0 0.0 0.0"/> -->
    <!--     <geometry> -->

    <!-- 	  <cylinder length="0.04" radius="0.04"/> -->
    <!--     </geometry> -->
    <!-- 	<material name="camblack"/> -->
    <!--   </visual> -->

    <!-- </link> -->

    <!-- <joint name="head_tracker_fixed" type="fixed"> -->
    <!--   <origin xyz="-0.030 0.0 0.111" rpy="0.0 0.0 0"/> -->
    <!--   <parent link="head" /> -->
    <!--   <child link="head_tracker" /> -->
    <!-- </joint> -->



    <link name="head_tip" >
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <mass value="0.001"/>
        <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6"/>
      </inertial>
    </link>

    <joint name="head_tip_fixed" type="fixed">
      <!-- between the cameras -->
      <origin xyz="0.057 0.0 0.056" rpy="0 0.0 0"/>

      <!-- Rotation center -->
      <!-- <origin xyz="0.0 0 0.0" rpy="0.0 0.0 0"/> -->
      <parent link="head" />
      <child link="head_tip" />
    </joint>


    <!-- <link name="camera_optical_left" > -->
    <!-- </link> -->

    <!-- <joint name="camera_optical_left" type="fixed"> -->
    <!--   <!-\- between the cameras -\-> -->
    <!--   <!-\- <origin xyz="0.030 0.022 0.085" rpy="-1.57 0.0 -1.57"/> -\-> -->

    <!--   <origin xyz="0.03531 0.0325 0.056" rpy="${-pi/2.0} 0 ${-pi/2.0}"/> -->
    <!--   <!-\- Rotation center -\-> -->
    <!--   <!-\- <origin xyz="0.0 0 0.0" rpy="0.0 0.0 0"/> -\-> -->
    <!--   <parent link="head" /> -->
    <!--   <child link="camera_optical_left" /> -->
    <!-- </joint> -->



    <!-- Reachy Cameras -->


      <joint name="left_cam_fixed" type="fixed">
	<origin xyz="0.03531 0.0325 0.056" rpy="0.0 0.0  ${-camera_convergence/2.0}"/>
	<parent link="head" />
	<child link="left_camera" />
      </joint>

      <link name="left_camera" >

	<inertial>
	  <mass value="1e-5" />
	  <origin xyz="0 0 0" rpy="0 0 0"/>
	  <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
	</inertial>
      </link>




      <link name="left_camera_optical">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <mass value="0.001"/>
        <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6"/>
      </inertial>
      </link>


      <joint name="left_camera_optical_joint" type="fixed">
	<!-- these values have to be these values otherwise the gazebo camera
             image won't be aligned properly with the frame it is supposedly
             originating from -->
	<origin xyz="0 0 0" rpy="${-pi/2.0} 0 ${-pi/2.0}"/>
	<parent link="left_camera"/>
	<child link="left_camera_optical"/>
      </joint>



      <joint name="right_cam_fixed" type="fixed">
	<origin xyz="0.03531 -0.0325 0.056" rpy="0.0 0.0 ${camera_convergence/2.0}"/>
	<parent link="head" />
	<child link="right_camera" />
      </joint>



      <link name="right_camera" >

	<inertial>
	  <mass value="1e-5" />
	  <origin xyz="0 0 0" rpy="0 0 0"/>
	  <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
	</inertial>
      </link>


      <link name="right_camera_optical">
      </link>


      <joint name="right_camera_optical_joint" type="fixed">
	<!-- these values have to be these values otherwise the gazebo camera
             image won't be aligned properly with the frame it is supposedly
             originating from -->
	<origin xyz="0 0 0" rpy="${-pi/2.0} 0 ${-pi/2.0}"/>
	<!-- <origin xyz="0.03531 -0.0325 0.056" rpy="${-pi/2.0} 0 ${-pi/2.0}"/> -->
	<parent link="right_camera"/>
	<child link="right_camera_optical"/>
      </joint>

    <xacro:if value="$(arg use_gazebo)">
      <gazebo reference="left_camera">
	<!-- <link name="left_camera"> -->
	<sensor type="camera" name="left_camera">


          <!-- Set always_on only sensor, not on plugin -->
          <always_on>0</always_on>

          <!-- Set update_rate only sensor, not on plugin -->
          <update_rate>30</update_rate>

          <camera name="left_camera">
            <horizontal_fov>1.5864830716633846</horizontal_fov>
            <image>
              <width>960</width>
              <height>720</height>
              <format>R8G8B8</format>
            </image>
            <distortion>
              <!-- <k1>-0.0057410988956689835</k1> -->
              <!-- <k2>0.01649821549654007</k2> -->
              <!-- <k3>0.0</k3> -->
              <!-- <p1>-0.021608084440231323</p1> -->
              <!-- <p2>0.006187329534441233</p2> -->
	      <k1>0.0</k1>
              <k2>0.0</k2>
              <k3>0.0</k3>
              <p1>0.0</p1>
              <p2>0.0</p2>

              <center>0.5 0.5</center>
            </distortion>

            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.007</stddev>
            </noise>

          </camera>

          <!-- Use camera, not camera_triggered -->
          <plugin name="left_camera_controller" filename="libgazebo_ros_camera.so">
              <ros>
                <namespace>/teleop_camera</namespace>
                <remapping>image_raw:=image_raw</remapping>
                <remapping>camera_info:=camera_info</remapping>
              </ros>
              <camera_name>left_image</camera_name>


            <!-- <ros> -->
            <!--   <namespace>custom_ns</namespace> -->
            <!--   <argument>image_raw:=custom_img</argument> -->
            <!--   <argument>camera_info:=custom_info</argument> -->
            <!-- </ros> -->

            <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
            <!-- <camera_name>left_camera</camera_name> -->

            <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
            <frame_name>left_camera_optical</frame_name>

            <hack_baseline>0.07</hack_baseline>

            <!-- No need to repeat distortion parameters or to set autoDistortion -->
          </plugin>
        </sensor>
      </gazebo>







      <gazebo reference="right_camera">
	<sensor type="camera" name="right_camera">


          <!-- Set always_on only sensor, not on plugin -->
          <always_on>0</always_on>

          <!-- Set update_rate only sensor, not on plugin -->
          <update_rate>30</update_rate>

          <camera name="right_camera">
            <horizontal_fov>1.5864830716633846</horizontal_fov>
            <image>
              <width>960</width>
              <height>720</height>
              <format>R8G8B8</format>
            </image>
            <distortion>
              <!-- <k1>-0.0057410988956689835</k1> -->
              <!-- <k2>0.01649821549654007</k2> -->
              <!-- <k3>0.0</k3> -->
              <!-- <p1>-0.021608084440231323</p1> -->
              <!-- <p2>0.006187329534441233</p2> -->
	      <k1>0.0</k1>
              <k2>0.0</k2>
              <k3>0.0</k3>
              <p1>0.0</p1>
              <p2>0.0</p2>
              <center>0.5 0.5</center>
            </distortion>

            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.007</stddev>
            </noise>

          </camera>

          <!-- Use camera, not camera_triggered -->
          <plugin name="right_camera_controller" filename="libgazebo_ros_camera.so">
              <ros>
                <namespace>/teleop_camera</namespace>
                <remapping>image_raw:=image_raw</remapping>
                <remapping>camera_info:=camera_info</remapping>
              </ros>
              <camera_name>right_image</camera_name>

            <!-- <ros> -->
            <!--   <namespace>custom_ns</namespace> -->
            <!--   <argument>image_raw:=custom_img</argument> -->
            <!--   <argument>camera_info:=custom_info</argument> -->
            <!-- </ros> -->

            <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
            <!-- <camera_name>right_camera</camera_name> -->

            <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
            <frame_name>right_camera_optical</frame_name>

            <hack_baseline>0.07</hack_baseline>

            <!-- No need to repeat distortion parameters or to set autoDistortion -->
          </plugin>
        </sensor>
      </gazebo>



      <!-- <link name="depth_camera_link" > -->

      <!-- 	<inertial> -->
      <!-- 	  <mass value="1e-5" /> -->
      <!-- 	  <origin xyz="0 0 0" rpy="0 0 0"/> -->
      <!-- 	  <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" /> -->
      <!-- 	</inertial> -->

      <!-- </link> -->

      <!-- <joint name="depth_cam_fixed" type="fixed"> -->
      <!-- 	<origin xyz="0.02 0 0.06105" rpy="0.0 0.0 0"/> -->
      <!-- 	<parent link="head" /> -->
      <!-- 	<child link="depth_camera_link" /> -->
      <!-- </joint> -->

      <!-- <link name="depth_camera_optical"> -->
      <!-- </link> -->


      <!-- <joint name="depth_camera_optical_joint" type="fixed"> -->
      <!-- 	<!-\- these values have to be these values otherwise the gazebo camera -->
      <!--        image won't be aligned properly with the frame it is supposedly -->
      <!--        originating from -\-> -->
      <!-- 	<origin xyz="0 0 0" rpy="${-pi/2.0} 0 ${-pi/2.0}"/> -->
      <!-- 	<parent link="depth_camera_link"/> -->
      <!-- 	<child link="depth_camera_optical"/> -->
      <!-- </joint> -->



      <!-- <xacro:if value="$(arg depth_camera)"> -->
      <!-- 	<gazebo reference="depth_camera_link"> -->
      <!-- 	  <sensor name="depth_camera" type="depth"> -->
      <!--       <always_on>true</always_on> -->
      <!--       <update_rate>15</update_rate> -->
      <!--       <pose>0 0 0 0 0 0</pose> -->
      <!--       <camera name="realsense_depth_camera"> -->
      <!--         <horizontal_fov>1.46608</horizontal_fov> -->
      <!--         <image> -->
      <!--           <width>424</width> -->
      <!--           <height>240</height> -->
      <!--           <format>B8G8R8</format> -->
      <!--         </image> -->
      <!--         <clip> -->
      <!--           <near>0.05</near> -->
      <!--           <far>8</far> -->
      <!--         </clip> -->
      <!--       </camera> -->
      <!--       <!-\- https://github.com/mlherd/ros2_turtlebot3_waffle_intel_realsense -\-> -->
      <!--       <!-\- <plugin name="intel_realsense_d430_depth_driver" filename="libgazebo_ros_camera.so"> -\-> -->
      <!--       <plugin name="intel_realsense_r200_depth_driver" filename="libgazebo_ros_camera.so"> -->
      <!--         <ros> -->
      <!--           <namespace>depth_camera</namespace> -->
      <!--           <remapping>depth_camera/image_raw:=color/image_raw</remapping> -->
      <!--           <remapping>depth_camera/depth/image_raw:=depth/image_rect_raw</remapping> -->
      <!--           <remapping>depth_camera/camera_info:=camera_info</remapping> -->
      <!--           <remapping>depth_camera/depth/camera_info:=depth/camera_info</remapping> -->
      <!--           <remapping>depth_camera/points:=depth/points</remapping> -->
      <!--         </ros> -->
      <!--         <camera_name>depth_camera</camera_name> -->
      <!--         <frame_name>depth_camera_optical</frame_name> -->
      <!--         <hack_baseline>0.07</hack_baseline> -->
      <!--         <min_depth>0.05</min_depth> -->
      <!--         <max_depth>8.0</max_depth> -->
      <!--       </plugin> -->
      <!-- 	  </sensor> -->
      <!-- 	</gazebo> -->
      <!-- </xacro:if> -->
</xacro:if>



</xacro:macro>
</robot>
