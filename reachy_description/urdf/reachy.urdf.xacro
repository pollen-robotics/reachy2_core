<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="reachy2">

  <xacro:arg name="use_fake_hardware" default="false" />
  <xacro:arg name="use_gazebo" default="false" />
  <xacro:arg name="use_mujoco" default="false" />
  <xacro:arg name="use_moveit_gazebo" default="false" />


  <xacro:include filename="$(find reachy_description)/urdf/head.urdf.xacro" />
  <xacro:include filename="$(find reachy_description)/urdf/arm.urdf.xacro" />
  <xacro:include filename="$(find dynamixel_description)/urdf/dynamixel_gripper.urdf.xacro" />
  <xacro:include
    filename="$(find dynamixel_description)/ros2_control/dynamixel_gripper.ros2_control.xacro" />

  <xacro:include filename="$(find pollen_generic_description)/urdf/inertial_primitives.urdf.xacro" />
  <xacro:include filename="$(find pollen_generic_description)/urdf/materials.urdf.xacro" />


  <xacro:include filename="$(find reachy_description)/urdf/gz_mimic.urdf.xacro" />
  <!-- Zuuu mobile base -->

  <xacro:arg name="zuuu_prefix" default="" />

  <xacro:arg name="model" default="zuuu" />

  <xacro:arg name="use_fake_components" default="true" />
  <xacro:arg name="use_fixed_wheels" default="true" />
  <xacro:arg name="use_ros_control" default="true" />


  <!-- Import zuuu macro -->
  <xacro:include filename="$(find zuuu_description)/urdf/zuuu_description.urdf.xacro" />

  <!-- Import Gazebo macro -->
  <xacro:include filename="$(find zuuu_description)/urdf/zuuu.gazebo.xacro" />

  <!-- Import Zuuu ros2_control description -->
  <xacro:include filename="$(find zuuu_description)/urdf/zuuu.ros2_control.xacro" />

  <xacro:zuuu
    model="$(arg model)" prefix="$(arg zuuu_prefix)">
  </xacro:zuuu>

  <xacro:if value="$(arg use_gazebo)">
    <xacro:zuuu_gazebo model="$(arg model)" prefix="$(arg zuuu_prefix)" />
  </xacro:if>

  <xacro:if value="$(arg use_ros_control)">
    <xacro:zuuu_ros2_control model="$(arg model)" prefix="$(arg zuuu_prefix)" />
  </xacro:if>

  <!-- End of Zuuu mobile base -->


  <!-- config  -->
  <xacro:arg name="antenna_config" default="$(find dynamixel_description)/config/two_fake.yaml" />
  <xacro:arg name="neck_config" default="$(find orbita3d_description)/config/fake_neck.yaml" />
  <xacro:arg name="right_shoulder_config" default="$(find orbita2d_description)/config/fake.yaml" />
  <xacro:arg name="right_elbow_config" default="$(find orbita2d_description)/config/fake.yaml" />
  <xacro:arg name="right_wrist_config" default="$(find orbita3d_description)/config/fake.yaml" />

  <xacro:arg name="left_shoulder_config" default="$(find orbita2d_description)/config/fake.yaml" />
  <xacro:arg name="left_elbow_config" default="$(find orbita2d_description)/config/fake.yaml" />
  <xacro:arg name="left_wrist_config" default="$(find orbita3d_description)/config/fake.yaml" />

  <!-- <xacro:arg name="right_arm_config" default="$(find arm_description)/config/fake_r_arm.yaml"
  /> -->
  <!-- <xacro:arg name="left_arm_config" default="$(find arm_description)/config/fake_l_arm.yaml" /> -->
  <xacro:arg name="grippers_config" default="$(find dynamixel_description)/config/two_fake.yaml" />
  <xacro:arg name="robot_model" default="none" />
  <xacro:arg name="robot_config" default="full_kit" />


  <!-- all the robot configurations -->
  <xacro:property name="mobile_base" value="false" />
  <xacro:property name="left_arm" value="false" />
  <xacro:property name="right_arm" value="false" />
  <xacro:property name="left_gripper" value="false" />
  <xacro:property name="right_gripper" value="false" />

  <!-- <xacro:property name="config" value="$(arg robot_config)" /> -->
  <xacro:property name="config" value="full_kit" />

  <xacro:if value="${config == 'full_kit'}">
    <xacro:property name="mobile_base" value="true" />
    <xacro:property name="left_arm" value="true" />
    <xacro:property name="left_gripper" value="true" />
    <xacro:property name="right_arm" value="true" />
    <xacro:property name="right_gripper" value="true" />
  </xacro:if>

  <xacro:if value="${config == 'full_kit_no_gripper'}">
    <xacro:property name="mobile_base" value="true" />
    <xacro:property name="left_arm" value="true" />
    <xacro:property name="right_arm" value="true" />

  </xacro:if>

  <xacro:if value="${config == 'left_arm'}">
    <xacro:property name="mobile_base" value="true" />
    <xacro:property name="left_arm" value="true" />
    <xacro:property name="left_gripper" value="true" />
  </xacro:if>


  <xacro:if value="${config == 'right_arm'}">
    <xacro:property name="mobile_base" value="true" />
    <xacro:property name="right_arm" value="true" />
    <xacro:property name="right_gripper" value="true" />
  </xacro:if>


  <xacro:if value="${config == 'left_arm_no_gripper'}">
    <xacro:property name="mobile_base" value="true" />
    <xacro:property name="left_arm" value="true" />
  </xacro:if>


  <xacro:if value="${config == 'right_arm_no_gripper'}">
    <xacro:property name="mobile_base" value="true" />
    <xacro:property name="right_arm" value="true" />
  </xacro:if>


  <!-- config  -->


  <!-- MODEL PARAMETERS -->
  <xacro:property name="base_collision" value="true" />
  <xacro:property name="base_visual" value="true" />
  <xacro:property name="damping" value="0.01" />
  <xacro:property name="friction" value="0.1" />


  <!-- Base height (torso) = 1000mm when back bar joint=525mm -->
  <!-- Parameters for the 3 bar base height -->
  <xacro:property name="back_bar_min_length" value="0.520" />
  <xacro:property name="back_bar_max_length" value="${back_bar_min_length+0.210}" />
  <!-- <xacro:property name="bar_angle" value="${radians(27.458)}" /> -->
  <xacro:property name="bar_angle" value="${radians(10.937)}" />
  <xacro:property name="bar_angle_offset"
    value="${pi/2-atan2(back_bar_min_length-0.03-0.018,bar_small_triangle_base-0.09)}" />

  <xacro:property name="bar_small_triangle_base" value="0.186" />

  <xacro:property name="back_bar_z" value="0.241" />
  <xacro:property name="back_bar_x" value="-0.09" />

  <xacro:property name="left_bar_x" value="0.084" />
  <xacro:property name="left_bar_y" value="0.066" />
  <xacro:property name="right_bar_x" value="0.084" />
  <xacro:property name="right_bar_y" value="-0.066" />
  <xacro:property name="right_bar_anchor" value="0.03" />


  <!-- <xacro:property name="back_bar_length" value="${base_height-0.2-back_bar_z}" /> -->
  <xacro:property name="back_bar_length" value="0.485" />


  <!-- TODO: replace by primitives -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}"
        iyz="0.0" izz="${(m/12) * (w*w + h*h)}" />
    </inertial>
  </xacro:macro>


  <link name="back_bar_base">
    <visual>
      <origin xyz="0 0 ${back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.04 0.04 ${back_bar_length}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.05 0.05 ${back_bar_length}" />
      </geometry>
    </collision>

    <xacro:box_inertia m="0.759" w="0.04" h="0.04" d="0.04" />
  </link>

  <joint name="back_bar_joint" type="fixed">
    <origin xyz="${back_bar_x} 0 ${back_bar_z}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="back_bar_base" />
  </joint>


  <link name="back_bar_inner">
    <visual>
      <origin xyz="0 0 ${back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.03 0.03 ${back_bar_length}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.05 0.05 ${back_bar_length}" />
      </geometry>
    </collision>
    <xacro:box_inertia m="0.759" w="0.04" h="0.04" d="0.04" />
  </link>


  <joint name="tripod_joint" type="prismatic">
    <origin xyz="0 0 0.035" rpy="0 0 0" />
    <parent link="back_bar_base" />
    <child link="back_bar_inner" />
    <limit effort="1.0" lower="0.0" upper="0.210" velocity="0.1" />
    <axis xyz="0 0 1" />
    <dynamics damping="${damping}" friction="${friction}" />
  </joint>


  <link name="left_bar_base">
    <visual>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <!-- <origin xyz="0 0 0" rpy="0 0 0" /> -->
      <geometry>
        <box size="0.04 0.04 ${back_bar_length}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.05 0.05 ${back_bar_length}" />
      </geometry>
    </collision>
    <xacro:box_inertia m="1.759" w="0.04" h="0.04" d="0.04" />
  </link>

  <link name="left_bar_anchor">
    <visual>
      <origin xyz="0 0 ${right_bar_anchor/2}" rpy="0 0 ${bar_angle}" />
      <geometry>
        <box size="0.03 0.03 ${right_bar_anchor}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${right_bar_anchor/2}" rpy="0 0 ${bar_angle}" />
      <geometry>
        <box size="0.03 0.03 ${right_bar_anchor}" />
      </geometry>
    </collision>
    <xacro:box_inertia m="1.759" w="0.03" h="0.03" d="0.03" />
  </link>


  <joint name="left_bar_anchor_to_base" type="fixed">
    <origin xyz="${left_bar_x} ${left_bar_y} ${back_bar_z}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="left_bar_anchor" />
  </joint>


  <joint name="left_bar_joint_mimic" type="revolute">
    <origin xyz="0 0.048 -0.258" rpy="0 0 ${bar_angle}" />
    <parent link="torso" />
    <child link="left_bar_inner" />
    <limit effort="0.01" lower="-1.0" upper="1.0" velocity="0.01" />
    <axis xyz="0 1 0" />
    <mimic joint="tripod_joint" multiplier="0.2864183599287582" offset="-0.1967146343049915" />
    <!-- <mimic joint="tripod_joint" multiplier="0" offset="0" /> -->
    <dynamics damping="${damping}" friction="${friction}" />
  </joint>


  <link name="left_bar_inner">
    <visual>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.03 0.03 ${back_bar_length}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.05 0.05 ${back_bar_length}" />
      </geometry>
    </collision>
    <xacro:box_inertia m="0.759" w="0.04" h="0.04" d="0.04" />
  </link>


  <joint name="left_bar_prism_joint_mimic" type="prismatic">
    <origin xyz="0 0 ${-back_bar_length}" rpy="0 0 0" />
    <parent link="left_bar_inner" />
    <child link="left_bar_base" />
    <limit effort="1.0" lower="-1.0" upper="1.0" velocity="0.5" />
    <axis xyz="0 0 1" />
    <mimic joint="tripod_joint" multiplier="-0.9861535348976198" offset="0.4814718126556904" />
    <dynamics damping="${damping}" friction="${friction}" />
  </joint>


  <!-- right bar -->

  <link name="right_bar_base">
    <visual>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <!-- <origin xyz="0 0 0" rpy="0 0 0" /> -->
      <geometry>
        <box size="0.04 0.04 ${back_bar_length}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.05 0.05 ${back_bar_length}" />
      </geometry>
    </collision>
    <!-- <xacro:box_inertia m="1.759" w="0.04" h="0.04" d="0.04"/> -->
    <xacro:box_inertia m="1.759" w="0.04" h="0.04" d="0.04" />
  </link>

  <link name="right_bar_anchor">
    <visual>
      <origin xyz="0 0 ${right_bar_anchor/2}" rpy="0 0 ${-bar_angle}" />
      <geometry>
        <box size="0.03 0.03 ${right_bar_anchor}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${right_bar_anchor/2}" rpy="0 0 ${-bar_angle}" />
      <geometry>
        <box size="0.03 0.03 ${right_bar_anchor}" />
      </geometry>
    </collision>
    <xacro:box_inertia m="1.759" w="0.03" h="0.03" d="0.03" />
  </link>


  <joint name="right_bar_anchor_to_base" type="fixed">
    <origin xyz="${right_bar_x} ${right_bar_y} ${back_bar_z}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="right_bar_anchor" />
  </joint>


  <joint name="right_bar_joint_mimic" type="revolute">
    <origin xyz="0 -0.048 -0.258" rpy="0 0 ${-bar_angle}" />
    <parent link="torso" />
    <child link="right_bar_inner" />
    <limit effort="0.01" lower="-1.0" upper="1.0" velocity="0.01" />
    <axis xyz="0 1 0" />
    <mimic joint="tripod_joint" multiplier="0.2864183599287582" offset="-0.1967146343049915" />
    <!-- <mimic joint="tripod_joint" multiplier="0" offset="0" /> -->
    <dynamics damping="${damping}" friction="${friction}" />
  </joint>


  <link name="right_bar_inner">
    <visual>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.03 0.03 ${back_bar_length}" />
      </geometry>
      <xacro:reachy_grey />
    </visual>

    <collision>
      <origin xyz="0 0 ${-back_bar_length/2}" rpy="0 0 0" />
      <geometry>
        <box size="0.05 0.05 ${back_bar_length}" />
      </geometry>
    </collision>
    <xacro:box_inertia m="0.759" w="0.04" h="0.04" d="0.04" />
  </link>


  <joint name="right_bar_prism_joint_mimic" type="prismatic">
    <origin xyz="0 0 ${-back_bar_length}" rpy="0 0 0" />
    <parent link="right_bar_inner" />
    <child link="right_bar_base" />
    <limit effort="1.0" lower="-1.0" upper="1.0" velocity="0.5" />
    <axis xyz="0 0 1" />
    <mimic joint="tripod_joint" multiplier="-0.9861535348976198" offset="0.4814718126556904" />
    <dynamics damping="${damping}" friction="${friction}" />
  </joint>


  <xacro:if value="$(arg use_gazebo)">
    <!-- 3rd order poly fit (pretty good): -0.82037152*x**3 + 0.74428024*x**2 -0.40967047*x +
    0.20061291 -->
    <!-- <xacro:mimic_joint_plugin_gazebo name_prefix="tripod_left_rev"
    following_joint="tripod_joint" mimic_joint="left_bar_joint_mimic"
    multiplier="0.2864183599287582" offset="-0.1967146343049915"/> -->
    <xacro:mimic_joint_plugin_gazebo name_prefix="tripod_left_rev" following_joint="tripod_joint"
      mimic_joint="left_bar_joint_mimic" multiplier="0.40967047" offset="-0.20061291"
      k2="-0.74428024," k3="0.82037152" />
    <xacro:mimic_joint_plugin_gazebo name_prefix="tripod_left_prism" following_joint="tripod_joint"
      mimic_joint="left_bar_prism_joint_mimic" multiplier="-0.9861535348976198"
      offset="0.4814718126556904" />

    <!-- <xacro:mimic_joint_plugin_gazebo name_prefix="tripod_right_rev"
    following_joint="tripod_joint" mimic_joint="right_bar_joint_mimic"
    multiplier="0.2864183599287582" offset="-0.1967146343049915"/> -->
    <xacro:mimic_joint_plugin_gazebo name_prefix="tripod_right_rev" following_joint="tripod_joint"
      mimic_joint="right_bar_joint_mimic" multiplier="0.40967047" offset="-0.20061291"
      k2="-0.74428024," k3="0.82037152" />
    <xacro:mimic_joint_plugin_gazebo name_prefix="tripod_right_prism" following_joint="tripod_joint"
      mimic_joint="right_bar_prism_joint_mimic" multiplier="-0.9861535348976198"
      offset="0.4814718126556904" />

  </xacro:if>


  <ros2_control name="tripod" type="system">
    <hardware>
      <xacro:if value="$(arg use_fake_components)">
        <!-- If gazebo mode is enabled -->
        <xacro:if value="$(arg use_gazebo)">
          <plugin>gazebo_ros2_control/GazeboSystem</plugin>
        </xacro:if>
        <!-- Else, when gazebo is not enabled -->
        <xacro:unless value="$(arg use_gazebo)">
          <!-- If mujoco mode is enabled -->
          <xacro:if value="$(arg use_mujoco)">
            <plugin>mujoco_ros2_control/MujocoSystem</plugin>
          </xacro:if>
          <!-- If neither gazebo nor mujoco are enabled -->
          <xacro:unless value="$(arg use_mujoco)">
            <plugin>fake_components/GenericSystem</plugin>
          </xacro:unless>
        </xacro:unless>
      </xacro:if>
    </hardware>

    <joint name="tripod_joint">
      <state_interface name="position">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="effort">
        <param name="initial_value">0.0</param>
      </state_interface>

      <!-- <command_interface name="position"> -->
      <!--   <param name="min">0.0</param> -->
      <!--   <param name="max">0.21</param> -->
      <!-- </command_interface> -->
      <command_interface name="position" />


    </joint>

    <xacro:if value="$(arg use_gazebo)">
      <joint name="left_bar_joint_mimic">
        <!-- <param name="mimic">tripod_joint</param> -->
        <!-- <param name="multiplier">0.2864183599287582</param> -->

        <command_interface name="position" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>


      <joint name="left_bar_prism_joint_mimic">
        <!-- <param name="mimic">tripod_joint</param> -->
        <!-- <param name="multiplier">0.9861535348976198</param> -->
        <command_interface name="position" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>


      <joint name="right_bar_joint_mimic">
        <!-- <param name="mimic">tripod_joint</param> -->
        <!-- <param name="multiplier">0.2864183599287582</param> -->

        <command_interface name="position" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>

      <joint name="right_bar_prism_joint_mimic">
        <!-- <param name="mimic">tripod_joint</param> -->
        <!-- <param name="multiplier">0.9861535348976198</param> -->
        <command_interface name="position" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>

    </xacro:if>

  </ros2_control>


  <!-- TORSO -->
  <link name="torso">
    <visual>
      <origin xyz="0 0 0 " rpy="0 0 0" />
      <geometry>

        <!-- <mesh filename="file://$(find reachy_description)/meshes/torso_visual_high.dae" /> -->
        <mesh filename="file://$(find reachy_description)/meshes/torso_visual.dae" />
      </geometry>

    </visual>

    <inertial>

      <!-- <origin xyz="-0.098614 -0.000471 -0.018363" rpy="0 0 0"/> -->
      <origin xyz="-0.051614 -0.000471 -0.018363" rpy="0 0 0" />
      <mass value="6.314" />
      <inertia ixx="0.07397673" ixy="-4.624e-4" ixz="-0.00175905"
        iyx="-0.00046237" iyy="0.04454533" iyz="0.00008675"
        izx="-0.00175905" izy="0.00008675" izz="0.05494939" />


    </inertial>

    <collision>
      <origin xyz="0 0 0 " rpy="0 0 0" />
      <geometry>

        <!-- <mesh filename="file://$(find reachy_description)/meshes/torso_collider_no_cone.dae" /> -->
        <mesh filename="file://$(find reachy_description)/meshes/torso_collider.dae" />

      </geometry>

    </collision>


  </link>

  <joint name="torso_base" type="fixed">
    <!-- <origin xyz="0.08 0 ${0.235 + back_bar_length}" rpy="0 0 0" /> -->
    <origin xyz="0.08 0 ${0.235 + back_bar_length}" rpy="0 0 0" />
    <parent link="back_bar_inner" />
    <child link="torso" />
  </joint>


  <!-- <joint name="torso_base" type="fixed"> -->
  <!--   <origin xyz="0.08 0 1.0" rpy="0 0 0" /> -->
  <!--   <parent link="base_link" /> -->
  <!--   <child link="torso" /> -->
  <!-- </joint> -->


  <!-- <link name="logo"> -->
  <!--   <inertial> -->
  <!--     <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" /> -->
  <!--     <mass value="0.001" /> -->
  <!--     <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" /> -->
  <!--   </inertial> -->
  <!-- </link> -->
  <!-- <joint name="logo_joint" type="fixed"> -->
  <!--   <origin xyz="0.047 0 0.0" rpy="0 0 0" /> -->
  <!--   <parent link="torso" /> -->
  <!--   <child link="logo" /> -->
  <!-- </joint> -->


  <!-- <gazebo reference="torso"> -->
  <!--   <!-\- <material>Gazebo/Black</material> -\-> -->
  <!--   <static>true</static> -->
  <!-- </gazebo> -->

  <!-- Head -->
  <xacro:head
    parent="torso"
    damping="${damping}" friction="${friction}"
    neck_config="$(arg neck_config)" antenna_config="$(arg antenna_config)"
  />

  <!-- RIGHT ARM -->

  <xacro:if value="${right_arm}">

    <xacro:arm
      prefix="r" parent="torso" side="right"
      damping="${damping}" friction="${friction}"
      shoulder_config_file="$(arg right_shoulder_config)"
      elbow_config_file="$(arg right_elbow_config)"
      wrist_config_file="$(arg right_wrist_config)"
      robot_model="$(arg robot_model)"
    />

  </xacro:if>

  <xacro:if value="${right_gripper}">

    <xacro:dynamixel_gripper
      prefix="r_hand" parent="r_wrist_out_link" side="right"
      damping="${damping}" friction="${friction}"
    />

    <link name="r_arm_tip">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
        <mass value="0.001" />
        <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
      </inertial>
    </link>

    <joint name="r_tip_joint" type="fixed">
      <!-- Rotated to be aligned with trunk in resting pos (elbows at -90°) -->
      <!-- <origin xyz="-0.012 0 0.14432" rpy="${pi} ${-pi/2} 0" /> -->
      <!-- <origin xyz="-0.012 0 0.14432" rpy="${pi} 0 0" /> -->
      <!-- Aligned with trunk in zero position -->
      <!-- <origin xyz="-0.012 0 0.14432" rpy="${pi} 0 0" /> -->
      <!-- Hard coded in symbolic ik... -->
      <origin xyz="0.0 0 0.10" rpy="${pi} 0 0" />
      <parent link="r_hand_palm_link" />
      <child link="r_arm_tip" />
    </joint>


    <link name="r_arm_tip_bottom">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
        <mass value="0.001" />
        <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
      </inertial>
    </link>

    <joint name="r_tip_joint_bottom" type="fixed">
      <!-- <origin xyz="-0.028 0 0.14432" rpy="${pi} ${-pi/2} 0" /> -->
      <origin xyz="-0.028 0 0.14432" rpy="${pi} 0 0" />
      <parent link="r_hand_palm_link" />
      <child link="r_arm_tip_bottom" />
    </joint>
  </xacro:if>


  <!-- LEFT ARM -->
  <xacro:if value="${left_arm}">

    <xacro:arm
      prefix="l" parent="torso" side="left"
      damping="${damping}" friction="${friction}"
      shoulder_config_file="$(arg left_shoulder_config)"
      elbow_config_file="$(arg left_elbow_config)"
      wrist_config_file="$(arg left_wrist_config)"
      robot_model="$(arg robot_model)"
    />
  </xacro:if>

  <xacro:if value="${left_gripper}">

    <xacro:dynamixel_gripper
      prefix="l_hand" parent="l_wrist_out_link" side="right"
      damping="${damping}" friction="${friction}"
    />

    <link name="l_arm_tip">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
        <mass value="0.001" />
        <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
      </inertial>
    </link>

    <joint name="l_tip_joint" type="fixed">
      <!-- Rotated to be aligned with trunk in resting pos (elbows at -90°) -->
      <!-- <origin xyz="-0.012 0 0.14432" rpy="${pi} ${-pi/2} 0" /> -->
      <!-- <origin xyz="-0.012 0 0.14432" rpy="${pi} 0 0" /> -->
      <!-- Aligned with trunk in zero position -->
      <!-- <origin xyz="-0.012 0 0.14432" rpy="${pi} 0 0" /> -->
      <!-- Hard coded in symbolic ik... -->
      <origin xyz="0.0 0 0.10" rpy="${pi} 0 0" />
      <parent link="l_hand_palm_link" />
      <child link="l_arm_tip" />
    </joint>


    <link name="l_arm_tip_bottom">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
        <mass value="0.001" />
        <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
      </inertial>
    </link>

    <joint name="l_tip_joint_bottom" type="fixed">
      <!-- <origin xyz="-0.028 0 0.14432" rpy="${pi} ${-pi/2} 0" /> -->
      <origin xyz="-0.028 0 0.14432" rpy="${pi} 0 0" />
      <parent link="l_hand_palm_link" />
      <child link="l_arm_tip_bottom" />
    </joint>


  </xacro:if>

  <xacro:if value="${left_gripper or right_gripper}">

    <xacro:dynamixel_gripper_control
      name="gripper" joint1="l_hand" joint2="r_hand"
      config_file="$(arg grippers_config)"
    />
  </xacro:if>


  <link name="depth_cam_l_optical">
    <inertial>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      <mass value="0.001" />
      <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
    </inertial>
  </link>
  <link name="depth_cam_l_frame">
    <inertial>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      <mass value="0.001" />
      <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
    </inertial>
  </link>

  <joint name="depth_cam_l_optical_joint" type="fixed">
    <origin xyz="0.058 0.025 -0.03" rpy="${radians(-47.5-90.0)} 0.0 ${-pi/2}" />
    <parent link="torso" />
    <child link="depth_cam_l_optical" />
  </joint>
  <joint name="depth_cam_l_frame_joint" type="fixed">
    <origin xyz="0.058 0.025 -0.03" rpy="0.0 ${radians(47.5)} 0.0" />
    <parent link="torso" />
    <child link="depth_cam_l_frame" />
  </joint>


  <link name="depth_cam_rgb_optical">
    <inertial>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      <mass value="0.001" />
      <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
    </inertial>
  </link>
  <link name="depth_cam_rgb_optical_frame">
    <inertial>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      <mass value="0.001" />
      <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
    </inertial>
  </link>
  <link name="depth_cam_rgb_frame">
    <inertial>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      <mass value="0.001" />
      <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
    </inertial>
  </link>

  <joint name="depth_cam_rgb_optical_joint" type="fixed">
    <origin xyz="0.058 0.0155 -0.03" rpy="${radians(-47.5-90.0)} 0.0 ${-pi/2}" />
    <parent link="torso" />
    <child link="depth_cam_rgb_optical" />
  </joint>
  <joint name="depth_cam_rgb_optical_frame_joint" type="fixed">
    <origin xyz="0.058 0.0155 -0.03" rpy="${radians(-47.5-90.0)} 0.0 ${-pi/2}" />
    <parent link="torso" />
    <child link="depth_cam_rgb_optical_frame" />
  </joint>
  <joint name="depth_cam_rgb_frame_joint" type="fixed">
    <origin xyz="0.058 0.0155 -0.03" rpy="0.0 ${radians(47.5)} 0.0" />
    <parent link="torso" />
    <child link="depth_cam_rgb_frame" />
  </joint>


  <link name="depth_cam_r_optical">
    <inertial>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      <mass value="0.001" />
      <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
    </inertial>
  </link>
  <link name="depth_cam_r_frame">
    <inertial>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      <mass value="0.001" />
      <inertia ixx="1.0e-6" ixy="1.0e-8" ixz="1.0e-8" iyy="1.0e-6" iyz="1.0e-8" izz="1.0e-6" />
    </inertial>
  </link>
  <joint name="depth_cam_r_optical_joint" type="fixed">
    <origin xyz="0.058 -0.025 -0.03" rpy="${radians(-47.5-90.0)} 0.0 ${-pi/2}" />
    <parent link="torso" />
    <child link="depth_cam_r_optical" />
  </joint>
  <joint name="depth_cam_r_frame_joint" type="fixed">
    <origin xyz="0.058 -0.025 -0.03" rpy="0.0 ${radians(47.5)} 0.0 " />
    <parent link="torso" />
    <child link="depth_cam_r_frame" />
  </joint>


  <gazebo reference="depth_cam_l_frame">
    <!-- <link name="left_camera"> -->
    <sensor type="camera" name="left_camera">


      <!-- Set always_on only sensor, not on plugin -->
      <always_on>0</always_on>

      <!-- Set update_rate only sensor, not on plugin -->
      <update_rate>30</update_rate>

      <camera name="depth_cam_l">
        <horizontal_fov>${90.0*pi/180}</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>B8G8R8</format>
        </image>
        <distortion>
          <k1>0.006059</k1>
          <k2>-0.048786</k2>
          <k3>0.033282</k3>
          <p1>-0.000877</p1>
          <p2>-0.000732</p2>
          <center>0.5 0.5</center>
        </distortion>

        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>

      </camera>

      <!-- Use camera, not camera_triggered -->
      <plugin name="depth_left_camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>camera</namespace>
          <remapping>left/image_raw:=/camera/left/color/image_raw</remapping>
          <remapping>left/image_raw/compressed:=/camera/left/color/image_raw/compressed</remapping>
          <remapping>left/camera_info:=/camera/left/color/camera_info</remapping>
        </ros>
        <camera_name>left</camera_name>


        <!-- <ros> -->
        <!--   <namespace>custom_ns</namespace> -->
        <!--   <argument>image_raw:=custom_img</argument> -->
        <!--   <argument>camera_info:=custom_info</argument> -->
        <!-- </ros> -->

        <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
        <!-- <camera_name>left_camera</camera_name> -->

        <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
        <frame_name>depth_cam_l_optical</frame_name>

        <hack_baseline>0.07</hack_baseline>

        <!-- No need to repeat distortion parameters or to set autoDistortion -->
      </plugin>
    </sensor>
  </gazebo>


  <gazebo reference="depth_cam_r_frame">
    <!-- <link name="left_camera"> -->
    <sensor type="camera" name="right_camera">


      <!-- Set always_on only sensor, not on plugin -->
      <always_on>0</always_on>

      <!-- Set update_rate only sensor, not on plugin -->
      <update_rate>30</update_rate>

      <camera name="depth_cam_r">
        <horizontal_fov>${90.0*pi/180}</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>B8G8R8</format>
        </image>
        <distortion>
          <k1>0.006059</k1>
          <k2>-0.048786</k2>
          <k3>0.033282</k3>
          <p1>-0.000877</p1>
          <p2>-0.000732</p2>

          <center>0.5 0.5</center>
        </distortion>

        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>

      </camera>

      <!-- Use camera, not camera_triggered -->
      <plugin name="depth_right_camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>camera</namespace>
          <remapping>right/image_raw:=/camera/right/color/image_raw</remapping>
          <remapping>right/image_raw/compressed:=/camera/right/color/image_raw/compressed</remapping>
          <remapping>right/camera_info:=/camera/right/color/camera_info</remapping>

          <!-- <remapping>image_raw:=image_raw</remapping> -->
          <!-- <remapping>camera_info:=camera_info</remapping> -->
        </ros>
        <camera_name>right</camera_name>


        <!-- <ros> -->
        <!--   <namespace>custom_ns</namespace> -->
        <!--   <argument>image_raw:=custom_img</argument> -->
        <!--   <argument>camera_info:=custom_info</argument> -->
        <!-- </ros> -->

        <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
        <!-- <camera_name>left_camera</camera_name> -->

        <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
        <frame_name>depth_cam_r_optical</frame_name>

        <hack_baseline>0.07</hack_baseline>

        <!-- No need to repeat distortion parameters or to set autoDistortion -->
      </plugin>
    </sensor>
  </gazebo>


  <gazebo reference="depth_cam_l_frame">
    <sensor name="depth_camera" type="depth">
      <always_on>true</always_on>
      <update_rate>30</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <camera name="depth_camera">
        <horizontal_fov>${90.0*pi/180}</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>B8G8R8</format>
        </image>
        <distortion>
          <k1>0.006059</k1>
          <k2>-0.048786</k2>
          <k3>0.033282</k3>
          <p1>-0.000877</p1>
          <p2>-0.000732</p2>

          <center>0.5 0.5</center>
        </distortion>

        <clip>
          <near>0.05</near>
          <far>8</far>
        </clip>


        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.07</stddev>
        </noise>


      </camera>

      <plugin name="depth_driver" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>/</namespace>
          <remapping>camera/image_raw:=camera/color/image_raw</remapping>
          <remapping>camera/image_raw/compressed:=camera/color/image_raw/compressed</remapping>
          <remapping>camera/camera_info:=camera/color/camera_info</remapping>
          <remapping>camera/image_depth:=camera/depth/image_raw</remapping>
          <remapping>camera/camera_info_depth:=camera/depth/camera_info</remapping>
          <remapping>camera/points:=camera/depth/points</remapping>
        </ros>
        <camera_name>camera</camera_name>
        <frame_name>depth_cam_l_optical</frame_name>
        <hack_baseline>0.07</hack_baseline>
        <min_depth>0.05</min_depth>
        <max_depth>8.0</max_depth>


      </plugin>
    </sensor>
  </gazebo>


  <!-- <link name="r_wrist_cam_frame"/> -->
  <!-- <joint name="r_wrist_cam_frame_joint" type="fixed"> -->
  <!--   <origin xyz="0 0 0" rpy="0.0 0 0"/> -->
  <!--   <parent link="r_gripper_palm_link"/> -->
  <!--   <child link="r_wrist_cam_frame"/> -->
  <!-- </joint> -->


  <!-- <link name="r_wrist_camera"/> -->
  <!-- <joint name="r_wrist_camera_joint" type="fixed"> -->
  <!--   <origin xyz="0.11 -0.01 0.08" rpy="0.35 -0.7 0"/> -->
  <!--   <parent link="r_wrist_cam_frame"/> -->
  <!--   <child link="r_wrist_camera"/> -->
  <!-- </joint> -->


  <xacro:if value="$(arg use_gazebo)">

    <gazebo>
      <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
        <!-- <parameters>$(find -->
        <!-- reachy_bringup)/config/reachy_${robot_config}_controllers.yaml</parameters> -->
        <parameters>$(find reachy_bringup)/config/reachy_full_kit_controllers.yaml</parameters>
        <!-- TODO FIX ME PROPER controller import  -->
        <robotNamespace>/reachy</robotNamespace>
      </plugin>
    </gazebo>


  </xacro:if>


</robot>